USE ROLE SYSADMIN;

-- Create warehouse, database, and schema for transcription project
CREATE OR REPLACE WAREHOUSE TRANSCRIPTION_WH; --by default, this creates an XS Standard Warehouse
CREATE OR REPLACE DATABASE TRANSCRIPTION_DB;
CREATE OR REPLACE SCHEMA TRANSCRIPTION_SCHEMA;

USE WAREHOUSE TRANSCRIPTION_WH;
USE DATABASE TRANSCRIPTION_DB;
USE SCHEMA TRANSCRIPTION_SCHEMA;

----------------------------------
----------------------------------
/* NOTEBOOK AND COMPUTE SETUP */
----------------------------------
----------------------------------
USE ROLE ACCOUNTADMIN;

-- Create GPU compute pool for Whisper transcription
DROP COMPUTE POOL IF EXISTS TRANSCRIPTION_GPU_POOL;

CREATE COMPUTE POOL TRANSCRIPTION_GPU_POOL
        MIN_NODES = 1
        MAX_NODES = 3
        INSTANCE_FAMILY = GPU_NV_S; -- May need to change this based on region

-- Create network rules for external access
CREATE OR REPLACE NETWORK RULE TRANSCRIPTION_DB.TRANSCRIPTION_SCHEMA.allow_all_rule
          TYPE = HOST_PORT
          MODE = EGRESS
          VALUE_LIST = ('0.0.0.0:443','0.0.0.0:80');

CREATE OR REPLACE EXTERNAL ACCESS INTEGRATION transcription_allow_all_integration
        ALLOWED_NETWORK_RULES = (TRANSCRIPTION_DB.TRANSCRIPTION_SCHEMA.allow_all_rule)
        ENABLED = TRUE;

CREATE OR REPLACE NETWORK RULE TRANSCRIPTION_DB.TRANSCRIPTION_SCHEMA.pypi_network_rule
          TYPE = HOST_PORT
          MODE = EGRESS
          VALUE_LIST = ('pypi.org', 'pypi.python.org', 'pythonhosted.org', 'files.pythonhosted.org');

CREATE OR REPLACE EXTERNAL ACCESS INTEGRATION transcription_pypi_access_integration
        ALLOWED_NETWORK_RULES = (TRANSCRIPTION_DB.TRANSCRIPTION_SCHEMA.pypi_network_rule)
        ENABLED = TRUE;

-- Grant ownership to SYSADMIN
GRANT OWNERSHIP ON COMPUTE POOL TRANSCRIPTION_GPU_POOL TO ROLE SYSADMIN;
GRANT OWNERSHIP ON INTEGRATION transcription_pypi_access_integration TO ROLE SYSADMIN;
GRANT OWNERSHIP ON INTEGRATION transcription_allow_all_integration TO ROLE SYSADMIN;

USE ROLE SYSADMIN;

----------------------------------
----------------------------------
/*          DATA SETUP          */
----------------------------------
----------------------------------

-- Create file format for CSV output
CREATE OR REPLACE FILE FORMAT TRANSCRIPTION_DB.TRANSCRIPTION_SCHEMA.CSVFORMAT 
    SKIP_HEADER = 1
    TYPE = 'CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY = '"';

-- Create stages
CREATE OR REPLACE STAGE NOTEBOOK_STAGE DIRECTORY=(ENABLE=true); -- to store notebook assets
CREATE OR REPLACE STAGE AUDIO_VIDEO_STAGE 
    DIRECTORY = (ENABLE = TRUE) 
    ENCRYPTION=(TYPE='SNOWFLAKE_SSE'); -- to store audio/video files for transcription

-- Create table to store transcription results
CREATE OR REPLACE TABLE TRANSCRIPTION_RESULTS (
    FILE_PATH VARCHAR(500),
    FILE_NAME VARCHAR(255),
    FILE_TYPE VARCHAR(10),
    DETECTED_LANGUAGE VARCHAR(50),
    TRANSCRIPT TEXT,
    TRANSCRIPT_WITH_SPEAKERS VARIANT,  -- JSON object with speaker segments
    PROCESSING_TIME_SECONDS FLOAT,
    TRANSCRIPTION_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FILE_SIZE_BYTES NUMBER,
    AUDIO_DURATION_SECONDS FLOAT,
    SPEAKER_COUNT NUMBER  -- Number of identified speakers
);

-- Create a view for easy querying
CREATE OR REPLACE VIEW TRANSCRIPTION_SUMMARY AS
SELECT 
    FILE_TYPE,
    DETECTED_LANGUAGE,
    COUNT(*) as FILE_COUNT,
    AVG(PROCESSING_TIME_SECONDS) as AVG_PROCESSING_TIME,
    AVG(AUDIO_DURATION_SECONDS) as AVG_DURATION,
    AVG(FILE_SIZE_BYTES) as AVG_FILE_SIZE,
    AVG(SPEAKER_COUNT) as AVG_SPEAKERS,
    MIN(TRANSCRIPTION_TIMESTAMP) as FIRST_TRANSCRIPTION,
    MAX(TRANSCRIPTION_TIMESTAMP) as LAST_TRANSCRIPTION
FROM TRANSCRIPTION_RESULTS
GROUP BY FILE_TYPE, DETECTED_LANGUAGE
ORDER BY FILE_COUNT DESC;

-- Create notebook (uncomment after uploading notebook files)
CREATE OR REPLACE NOTEBOOK TRANSCRIPTION_MAIN
FROM '@TRANSCRIPTION_DB.TRANSCRIPTION_SCHEMA.NOTEBOOK_STAGE'
MAIN_FILE = 'audio_video_transcription.ipynb'
QUERY_WAREHOUSE = 'TRANSCRIPTION_WH'
COMPUTE_POOL='TRANSCRIPTION_GPU_POOL'
RUNTIME_NAME='SYSTEM$GPU_RUNTIME';

ALTER NOTEBOOK TRANSCRIPTION_MAIN ADD LIVE VERSION FROM LAST;
ALTER NOTEBOOK TRANSCRIPTION_MAIN set external_access_integrations = (
"TRANSCRIPTION_PYPI_ACCESS_INTEGRATION", 
"TRANSCRIPTION_ALLOW_ALL_INTEGRATION");

-- Sample queries to test after transcription:
/*
-- View all transcriptions
SELECT * FROM TRANSCRIPTION_RESULTS ORDER BY TRANSCRIPTION_TIMESTAMP DESC;

-- Search transcripts for specific content
SELECT FILE_NAME, TRANSCRIPT, DETECTED_LANGUAGE 
FROM TRANSCRIPTION_RESULTS 
WHERE TRANSCRIPT ILIKE '%your_search_term%';

-- Get summary statistics
SELECT * FROM TRANSCRIPTION_SUMMARY;

-- Find longest/shortest audio files
SELECT FILE_NAME, AUDIO_DURATION_SECONDS, TRANSCRIPT
FROM TRANSCRIPTION_RESULTS 
ORDER BY AUDIO_DURATION_SECONDS DESC;
*/ 